type token =
  | Num of (int)
  | EOF
  | Id of (string)
  | TRUE
  | FALSE
  | LET
  | REC
  | EQ
  | IN
  | FUN
  | ARROW
  | IF
  | THEN
  | ELSE
  | OR
  | AND
  | LT
  | LE
  | NE
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | LBRAC
  | RBRAC
  | SEMI
  | COLONCOLON

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(*See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano 
# 39 "nanoParse.ml"
let yytransl_const = [|
    0 (* EOF *);
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* LET *);
  262 (* REC *);
  263 (* EQ *);
  264 (* IN *);
  265 (* FUN *);
  266 (* ARROW *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
  270 (* OR *);
  271 (* AND *);
  272 (* LT *);
  273 (* LE *);
  274 (* NE *);
  275 (* PLUS *);
  276 (* MINUS *);
  277 (* MUL *);
  278 (* DIV *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* LBRAC *);
  282 (* RBRAC *);
  283 (* SEMI *);
  284 (* COLONCOLON *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  258 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\006\000\006\000\006\000\007\000\007\000\
\007\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\006\000\007\000\004\000\006\000\001\000\003\000\001\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\002\000\002\000\001\000\003\000\003\000\001\000\003\000\003\000\
\001\000\002\000\001\000\001\000\001\000\001\000\001\000\003\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\028\000\029\000\030\000\031\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\001\000\000\000\004\000\002\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000"

let yysindex = "\032\000\
\047\255\000\000\000\000\000\000\000\000\000\000\023\255\022\255\
\047\255\047\255\005\255\000\000\021\255\027\255\254\254\011\255\
\049\255\252\254\009\255\000\000\046\255\053\255\050\255\054\255\
\051\255\000\000\011\255\061\255\061\255\061\255\061\255\061\255\
\061\255\000\000\009\255\009\255\061\255\061\255\009\255\009\255\
\045\255\000\000\047\255\066\255\047\255\047\255\000\000\027\255\
\254\254\011\255\011\255\011\255\011\255\252\254\252\254\011\255\
\011\255\009\255\009\255\070\255\047\255\000\000\067\255\047\255\
\071\255\047\255\000\000\047\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\001\024\001\252\000\148\000\
\133\000\067\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\001\
\004\001\174\000\187\000\200\000\213\000\089\000\111\000\226\000\
\239\000\023\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\249\255\000\000\046\000\052\000\245\255\000\000\005\000\007\000\
\241\255"

let yytablesize = 582
let yytable = "\027\000\
\025\000\024\000\025\000\042\000\030\000\003\000\004\000\005\000\
\006\000\003\000\004\000\005\000\006\000\031\000\032\000\033\000\
\039\000\040\000\050\000\051\000\052\000\053\000\024\000\023\000\
\021\000\056\000\057\000\010\000\022\000\011\000\026\000\010\000\
\001\000\041\000\028\000\060\000\034\000\062\000\063\000\054\000\
\055\000\029\000\042\000\042\000\023\000\058\000\059\000\003\000\
\004\000\005\000\006\000\007\000\043\000\065\000\044\000\008\000\
\067\000\009\000\069\000\045\000\070\000\003\000\004\000\005\000\
\006\000\046\000\022\000\035\000\036\000\010\000\026\000\011\000\
\061\000\048\000\047\000\037\000\038\000\064\000\068\000\066\000\
\049\000\000\000\000\000\010\000\000\000\011\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\025\000\
\025\000\000\000\000\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\007\000\
\025\000\000\000\025\000\025\000\025\000\024\000\024\000\006\000\
\000\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\005\000\024\000\000\000\
\024\000\024\000\024\000\023\000\023\000\000\000\000\000\000\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\000\000\023\000\023\000\
\023\000\022\000\022\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\
\000\000\000\000\022\000\000\000\022\000\022\000\022\000\020\000\
\020\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
\020\000\000\000\020\000\020\000\020\000\021\000\021\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\000\000\000\000\000\000\021\000\000\000\
\021\000\021\000\021\000\019\000\019\000\000\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\000\000\000\000\014\000\014\000\019\000\000\000\019\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\017\000\
\017\000\000\000\000\000\014\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\000\000\010\000\010\000\000\000\000\000\
\017\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\012\000\012\000\000\000\000\000\010\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\000\000\013\000\013\000\
\000\000\000\000\012\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\000\000\011\000\011\000\000\000\000\000\013\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\000\000\
\016\000\016\000\000\000\000\000\011\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\000\000\015\000\015\000\000\000\
\000\000\016\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\000\000\000\000\009\000\000\000\000\000\015\000\009\000\
\009\000\009\000\009\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\007\000\007\000\007\000\000\000\006\000\
\000\000\000\000\000\000\006\000\006\000\006\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\006\000\
\000\000\005\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000"

let yycheck = "\011\000\
\000\000\009\000\010\000\019\000\007\001\001\001\002\001\003\001\
\004\001\001\001\002\001\003\001\004\001\016\001\017\001\018\001\
\021\001\022\001\030\000\031\000\032\000\033\000\000\000\002\001\
\002\001\037\000\038\000\023\001\006\001\025\001\026\001\023\001\
\001\000\025\001\014\001\043\000\026\001\045\000\046\000\035\000\
\036\000\015\001\058\000\059\000\000\000\039\000\040\000\001\001\
\002\001\003\001\004\001\005\001\007\001\061\000\002\001\009\001\
\064\000\011\001\066\000\010\001\068\000\001\001\002\001\003\001\
\004\001\012\001\000\000\019\001\020\001\023\001\026\001\025\001\
\007\001\028\000\024\001\027\001\028\001\008\001\008\001\013\001\
\029\000\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\000\000\
\024\001\255\255\026\001\027\001\028\001\007\001\008\001\000\000\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\000\000\024\001\255\255\
\026\001\027\001\028\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\255\255\026\001\027\001\
\028\001\007\001\008\001\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\255\255\024\001\255\255\026\001\027\001\028\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\024\001\255\255\
\026\001\027\001\028\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\007\001\008\001\024\001\255\255\026\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\007\001\
\008\001\255\255\255\255\024\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\007\001\008\001\255\255\255\255\
\024\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\007\001\008\001\255\255\255\255\024\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\007\001\008\001\
\255\255\255\255\024\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\007\001\008\001\255\255\255\255\024\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\007\001\008\001\255\255\255\255\024\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\007\001\008\001\255\255\
\255\255\024\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\008\001\255\255\255\255\024\001\012\001\
\013\001\014\001\015\001\008\001\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\008\001\
\255\255\255\255\255\255\012\001\013\001\014\001\255\255\008\001\
\255\255\255\255\255\255\012\001\013\001\014\001\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\008\001\255\255\024\001\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001"

let yynames_const = "\
  EOF\000\
  TRUE\000\
  FALSE\000\
  LET\000\
  REC\000\
  EQ\000\
  IN\000\
  FUN\000\
  ARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  OR\000\
  AND\000\
  LT\000\
  LE\000\
  NE\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  LBRAC\000\
  RBRAC\000\
  SEMI\000\
  COLONCOLON\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 43 "nanoParse.mly"
                                ( Let (_2, _4, _6) )
# 325 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 44 "nanoParse.mly"
                                ( Letrec (_3, _5, _7) )
# 334 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 45 "nanoParse.mly"
                                ( Fun (_2, _4) )
# 342 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Nano.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 46 "nanoParse.mly"
                                ( If (_2, _4, _6) )
# 351 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'orexp) in
    Obj.repr(
# 48 "nanoParse.mly"
                              ( _1 )
# 358 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'orexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'andexp) in
    Obj.repr(
# 51 "nanoParse.mly"
                                ( Bin (_1, Or, _3) )
# 366 "nanoParse.ml"
               : 'orexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'andexp) in
    Obj.repr(
# 52 "nanoParse.mly"
                                ( _1 )
# 373 "nanoParse.ml"
               : 'orexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'andexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'compexp) in
    Obj.repr(
# 55 "nanoParse.mly"
                                ( Bin (_1, And, _3) )
# 381 "nanoParse.ml"
               : 'andexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compexp) in
    Obj.repr(
# 56 "nanoParse.mly"
                                ( _1 )
# 388 "nanoParse.ml"
               : 'andexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 59 "nanoParse.mly"
                               ( Bin (_1, Eq, _3) )
# 396 "nanoParse.ml"
               : 'compexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 60 "nanoParse.mly"
                               ( Bin (_1, Ne, _3) )
# 404 "nanoParse.ml"
               : 'compexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 62 "nanoParse.mly"
                               ( Bin (_1, Lt, _3) )
# 412 "nanoParse.ml"
               : 'compexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'compexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 63 "nanoParse.mly"
                               ( Bin (_1, Le, _3) )
# 420 "nanoParse.ml"
               : 'compexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 64 "nanoParse.mly"
                                ( _1 )
# 427 "nanoParse.ml"
               : 'compexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 67 "nanoParse.mly"
                                ( Bin (_1, Cons, _3) )
# 435 "nanoParse.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 68 "nanoParse.mly"
                                ( Bin (_1, Cons, _3) )
# 443 "nanoParse.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 69 "nanoParse.mly"
                                ( _2 )
# 450 "nanoParse.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lexp) in
    Obj.repr(
# 70 "nanoParse.mly"
                                ( Bin (_1, Cons, NilExpr) )
# 457 "nanoParse.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp1) in
    Obj.repr(
# 71 "nanoParse.mly"
                                ( _1 )
# 464 "nanoParse.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp2) in
    Obj.repr(
# 74 "nanoParse.mly"
                                ( Bin (_1, Plus, _3) )
# 472 "nanoParse.ml"
               : 'aexp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'aexp2) in
    Obj.repr(
# 75 "nanoParse.mly"
                                ( Bin (_1, Minus, _3) )
# 480 "nanoParse.ml"
               : 'aexp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp2) in
    Obj.repr(
# 76 "nanoParse.mly"
                                ( _1 )
# 487 "nanoParse.ml"
               : 'aexp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 79 "nanoParse.mly"
                                ( Bin (_1, Div, _3) )
# 495 "nanoParse.ml"
               : 'aexp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'aexp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 80 "nanoParse.mly"
                                ( Bin (_1, Mul, _3) )
# 503 "nanoParse.ml"
               : 'aexp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 81 "nanoParse.mly"
                                ( _1 )
# 510 "nanoParse.ml"
               : 'aexp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 83 "nanoParse.mly"
                                ( App (_1, _2))
# 518 "nanoParse.ml"
               : 'fexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 84 "nanoParse.mly"
                                ( _1 )
# 525 "nanoParse.ml"
               : 'fexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 86 "nanoParse.mly"
                                ( Const _1 )
# 532 "nanoParse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "nanoParse.mly"
                                ( Var _1 )
# 539 "nanoParse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "nanoParse.mly"
                                ( True )
# 545 "nanoParse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "nanoParse.mly"
                                ( False )
# 551 "nanoParse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 90 "nanoParse.mly"
                                ( _2 )
# 558 "nanoParse.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "nanoParse.mly"
                                ( NilExpr )
# 564 "nanoParse.ml"
               : 'bexp))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
